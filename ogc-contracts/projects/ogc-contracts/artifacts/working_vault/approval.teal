#pragma version 8
intcblock 0 1
bytecblock 0x746f74616c 0x676f616c 0x151f7c75 0x646561646c696e65 0x7265636569766572
txna ApplicationArgs 0
pushbytes 0x52735321 // "create(uint64,uint64,address)uint64"
==
bnz main_l10
txna ApplicationArgs 0
pushbytes 0xfe717b6d // "contribute(pay)void"
==
bnz main_l9
txna ApplicationArgs 0
pushbytes 0x076bbd4d // "release()void"
==
bnz main_l8
txna ApplicationArgs 0
pushbytes 0x9599bb25 // "get_goal()uint64"
==
bnz main_l7
txna ApplicationArgs 0
pushbytes 0x3d546064 // "get_total()uint64"
==
bnz main_l6
err
main_l6:
txn OnCompletion
intc_0 // NoOp
==
txn ApplicationID
intc_0 // 0
!=
&&
assert
callsub gettotalcaster_9
intc_1 // 1
return
main_l7:
txn OnCompletion
intc_0 // NoOp
==
txn ApplicationID
intc_0 // 0
!=
&&
assert
callsub getgoalcaster_8
intc_1 // 1
return
main_l8:
txn OnCompletion
intc_0 // NoOp
==
txn ApplicationID
intc_0 // 0
!=
&&
assert
callsub releasecaster_7
intc_1 // 1
return
main_l9:
txn OnCompletion
intc_0 // NoOp
==
txn ApplicationID
intc_0 // 0
!=
&&
assert
callsub contributecaster_6
intc_1 // 1
return
main_l10:
txn OnCompletion
intc_0 // NoOp
==
txn ApplicationID
intc_0 // 0
==
&&
assert
callsub createcaster_5
intc_1 // 1
return

// create
create_0:
proto 3 1
intc_0 // 0
bytec_1 // "goal"
frame_dig -3
app_global_put
bytec_3 // "deadline"
frame_dig -2
app_global_put
bytec 4 // "receiver"
frame_dig -1
app_global_put
bytec_0 // "total"
intc_0 // 0
app_global_put
global CurrentApplicationID
frame_bury 0
retsub

// contribute
contribute_1:
proto 1 0
frame_dig -1
gtxns Receiver
global CurrentApplicationAddress
==
frame_dig -1
gtxns Amount
intc_0 // 0
>
&&
assert
bytec_0 // "total"
bytec_0 // "total"
app_global_get
frame_dig -1
gtxns Amount
+
app_global_put
retsub

// release
release_2:
proto 0 0
global Round
bytec_3 // "deadline"
app_global_get
>=
global CurrentApplicationAddress
balance
bytec_1 // "goal"
app_global_get
>=
&&
assert
itxn_begin
intc_1 // pay
itxn_field TypeEnum
bytec 4 // "receiver"
app_global_get
itxn_field Receiver
global CurrentApplicationAddress
balance
pushint 1000000 // 1000000
-
itxn_field Amount
itxn_submit
retsub

// get_goal
getgoal_3:
proto 0 1
intc_0 // 0
bytec_1 // "goal"
app_global_get
frame_bury 0
retsub

// get_total
gettotal_4:
proto 0 1
intc_0 // 0
bytec_0 // "total"
app_global_get
frame_bury 0
retsub

// create_caster
createcaster_5:
proto 0 0
intc_0 // 0
dupn 2
pushbytes 0x // ""
txna ApplicationArgs 1
btoi
frame_bury 1
txna ApplicationArgs 2
btoi
frame_bury 2
txna ApplicationArgs 3
frame_bury 3
frame_dig 1
frame_dig 2
frame_dig 3
callsub create_0
frame_bury 0
bytec_2 // 0x151f7c75
frame_dig 0
itob
concat
log
retsub

// contribute_caster
contributecaster_6:
proto 0 0
intc_0 // 0
txn GroupIndex
intc_1 // 1
-
frame_bury 0
frame_dig 0
gtxns TypeEnum
intc_1 // pay
==
assert
frame_dig 0
callsub contribute_1
retsub

// release_caster
releasecaster_7:
proto 0 0
callsub release_2
retsub

// get_goal_caster
getgoalcaster_8:
proto 0 0
intc_0 // 0
callsub getgoal_3
frame_bury 0
bytec_2 // 0x151f7c75
frame_dig 0
itob
concat
log
retsub

// get_total_caster
gettotalcaster_9:
proto 0 0
intc_0 // 0
callsub gettotal_4
frame_bury 0
bytec_2 // 0x151f7c75
frame_dig 0
itob
concat
log
retsub